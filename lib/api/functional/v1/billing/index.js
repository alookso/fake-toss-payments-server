"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pay = exports.authorizations = void 0;
/**
 * @packageDocumentation
 * @module api.functional.v1.billing
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
var nestia_fetcher_1 = require("nestia-fetcher");
exports.authorizations = __importStar(require("./authorizations"));
/**
 * 간편 결제에 등록한 수단으로 결제하기.
 *
 * `billing.pay` 는 간편 결제에 등록한 수단으로 결제를 진행하고자 할 때 호출하는 API
 * 함수이다.
 *
 * 그리고 `billing.pay` 는 결제 수단 중 유일하게, 클라이언트 어플리케이션이 토스
 * 페이먼츠가 제공하는 결제 창을 사용할 수 없어, 귀하의 백엔드 서버가 토스 페이먼츠의
 * API 함수를 직접 호출해야 하는 경우에 해당한다. 따라서 간편 결제에 관련하여 토스
 * 페이먼츠와 연동하는 백엔드 서버 및 프론트 어플리케이션을 개발할 때, 반드시 이 상황에
 * 대한 별도의 설계 및 개발이 필요하니, 이 점을 염두에 두기 바란다.
 *
 * 더하여 `billing.pay` 는 철저히 귀사 백엔드 서버의 판단 아래 호출되는 API 함수인지라,
 * 이를 통하여 이루어지는 결제는 일절 {@link  payments.approve } 가 필요 없다. 다만
 * `billing.pay` 는 이처럼 부차적인 승인 과정 필요없이 그 즉시로 결제가 완성되니, 이를
 * 호출하는 상황에 대하여 세심히 주의를 기울일 필요가 있다
 *
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param billingKey 간편 결제에 등록한 수단의 {@link ITossBilling.billingKey}
 * @param input 주문 정보
 * @returns 결제 정보
 * @author Jeongho Nam - https://github.com/samchon
 *
 * @controller FakeTossBillingController.pay()
 * @path POST /v1/billing/:billingKey
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function pay(connection, billingKey, input) {
    return nestia_fetcher_1.Fetcher.fetch(connection, pay.ENCRYPTED, pay.METHOD, pay.path(billingKey), input);
}
exports.pay = pay;
(function (pay) {
    pay.METHOD = "POST";
    pay.PATH = "/v1/billing/:billingKey";
    pay.ENCRYPTED = {
        request: false,
        response: false,
    };
    function path(billingKey) {
        return "/v1/billing/".concat(billingKey);
    }
    pay.path = path;
})(pay = exports.pay || (exports.pay = {}));
//# sourceMappingURL=index.js.map