"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancel = exports.key_in = exports.at = exports.confirm = void 0;
/**
 * @packageDocumentation
 * @module api.functional.v1.payments
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
var nestia_fetcher_1 = require("nestia-fetcher");
exports.confirm = __importStar(require("./confirm"));
/**
 * 결제 정보 조회하기.
 *
 * `payments.at` 은 결제 정보를 조회하는 함수이다.
 *
 * 주로 클라이언트 어플리케이션이 토스 페이먼츠가 자체적으로 제공하는 결제 창을 사용하는
 * 경우, 그래서 프론트 어플리케이션이 귀하의 백엔드 서버에 `paymentKey` 등 극히 일부의
 * 식별자 정보만을 전달해주어, 상세 결제 정보가 필요할 때 사용한다.
 *
 * 참고로 토스 페이먼츠는 다른 결제 PG 사들과 다르게, 클라이언트 어플리케이션에서 토스
 * 페이먼츠의 결제 창을 이용하여 진행한 결제가 바로 확정되는 것은 아니다. 귀사의 백엔드
 * 서버가 현재의 `payments.at` 을 통하여 해당 결제 정보를 확인하고, {@link approve} 를
 * 호출하여 직접 승인하기 전까지, 해당 결제는 확정되지 않으니, 이 점에 유의하기 바란다.
 *
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param paymentKey 결제 정보의 {@link ITossPayment.paymentKey}
 * @returns 결제 정보
 * @author Jeongho Nam - https://github.com/samchon
 *
 * @controller FakeTossPaymentsController.at()
 * @path GET /v1/payments/:paymentKey
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function at(connection, paymentKey) {
    return nestia_fetcher_1.Fetcher.fetch(connection, at.ENCRYPTED, at.METHOD, at.path(paymentKey));
}
exports.at = at;
(function (at) {
    at.METHOD = "GET";
    at.PATH = "/v1/payments/:paymentKey";
    at.ENCRYPTED = {
        request: false,
        response: false,
    };
    function path(paymentKey) {
        return "/v1/payments/".concat(encodeURIComponent(paymentKey));
    }
    at.path = path;
})(at = exports.at || (exports.at = {}));
/**
 * 카드로 결제하기.
 *
 * `payments.key_in` 은 카드를 이용한 결제를 할 때 호출되는 API 함수이다.
 *
 * 참고로 `payments.key_in` 는 클라이언트 어플리케이션이 토스 페이먼츠가 자체적으로
 * 제공하는 결제 창을 사용하는 경우, 귀하의 백엔드 서버가 이를 실 서비스에서 호출하는
 * 일은 없을 것이다. 다만, 고객이 카드를 통하여 결제하는 상황을 시뮬레이션하기 위하여,
 * 테스트 자동화 프로그램 수준에서 사용될 수는 있다.
 *
 * 그리고 귀하의 백엔드 서버가 `payments.key-in` 을 직접 호출하는 경우, 토스 페이먼츠
 * 서버는 이를 완전히 승인된 결제로 보고 바로 확정한다. 때문에 `payments.key-in` 을
 * 직접 호출하는 경우, 토스 페이먼츠의 결제 창을 이용하여 별도의 {@link approve} 가
 * 필요한 때 대비, 훨씬 더 세심한 주의가 요구된다.
 *
 * 더하여 만약 귀하의 백엔드 서버가 `fake-toss-payments-server` 를 이용하여 고객의
 * 카드 결제를 시뮬레이션하는 경우, {@link ITossCardPayment.IStore.__approved} 값을
 * `false` 로 하여 카드 결제의 확정을 고의로 회피할 수 있다. 이를 통하여 토스
 * 페이먼츠의 결제 창을 이용한 카드 결제의 경우, 별도의 {@link approve} 가 필요한
 * 상황을 시뮬레이션 할 수 있다.
 *
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param input 카드 결제 입력 정보
 * @returns 카드 결제 정보
 * @author Jeongho Nam - https://github.com/samchon
 *
 * @controller FakeTossPaymentsController.key_in()
 * @path POST /v1/payments/key-in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function key_in(connection, input) {
    return nestia_fetcher_1.Fetcher.fetch(connection, key_in.ENCRYPTED, key_in.METHOD, key_in.path(), input);
}
exports.key_in = key_in;
(function (key_in) {
    key_in.METHOD = "POST";
    key_in.PATH = "/v1/payments/key-in";
    key_in.ENCRYPTED = {
        request: false,
        response: false,
    };
    function path() {
        return "/v1/payments/key-in";
    }
    key_in.path = path;
})(key_in = exports.key_in || (exports.key_in = {}));
/**
 * 결제 취소하기.
 *
 * `payments.cancel` 은 결제를 취소하는 API 이다.
 *
 * 결제 취소 입력 정보 {@link ITossPaymentCancel.IStore} 에는 취소 사유를 비롯하여,
 * 고객에게 환불해 줄 금액과 부가세 및 필요시 환불 계좌 정보 등을 입력하게 되어있다.
 *
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param paymentKey 결제 정보의 {@link ITossPayment.paymentKey}
 * @param input 취소 입력 정보
 * @returns 취소된 결제 정보
 * @author Jeongho Nam - https://github.com/samchon
 *
 * @controller FakeTossPaymentsController.cancel()
 * @path POST /v1/payments/:paymentKey/cancel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
function cancel(connection, paymentKey, input) {
    return nestia_fetcher_1.Fetcher.fetch(connection, cancel.ENCRYPTED, cancel.METHOD, cancel.path(paymentKey), input);
}
exports.cancel = cancel;
(function (cancel) {
    cancel.METHOD = "POST";
    cancel.PATH = "/v1/payments/:paymentKey/cancel";
    cancel.ENCRYPTED = {
        request: false,
        response: false,
    };
    function path(paymentKey) {
        return "/v1/payments/".concat(encodeURIComponent(paymentKey), "/cancel");
    }
    cancel.path = path;
})(cancel = exports.cancel || (exports.cancel = {}));
//# sourceMappingURL=index.js.map