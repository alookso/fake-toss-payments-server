/**
 * @packageDocumentation
 * @module api.functional.v1.payments.confirm
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import { Fetcher, Primitive } from "nestia-fetcher";
import type { IConnection } from "nestia-fetcher";
import type { ITossPayment } from "./../../../../structures/ITossPayment";
/**
 * 결제 승인하기.
 *
 * 토스 페이먼츠는 귀사의 백엔드에서 일어난 결제가 아닌 프론트 어플리케이션의 결제 창에서
 * 이루어진 결제의 경우, 해당 서비스으 백엔드 서버로부터 결제를 승인받기 전까지, 이를
 * 확정하지 않는다. `payments.approve` 는 바로 이러한 상황에서, 해당 결제를 승인해주는
 * 함수이다.
 *
 * 만일 귀하가 `fake-toss-payments-server` 를 이용하여 결제를 시뮬레이션하는 경우라면,
 * 결제 관련 API 를 호출함에 있어 {@link ITossCardPayment.IStore.__approved} 내지
 * {@link  ITossVirtualAccountPayment.IStore.__approved } 를 `false` 로 함으로써, 별도
 * 승인이 필요한 이러한 상황을 시뮬레이션 할 수 있다.
 *
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param input 주문 정보 확인
 * @returns 승인된 결제 정보
 * @author Jeongho Nam - https://github.com/samchon
 *
 * @controller FakeTossPaymentsController.approve()
 * @path POST /v1/payments/confirm
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function approve(connection: IConnection, input: Primitive<approve.Input>): Promise<approve.Output>;
export declare namespace approve {
    type Input = Primitive<ITossPayment.IApproval>;
    type Output = Primitive<ITossPayment>;
    const METHOD: "POST";
    const PATH: string;
    const ENCRYPTED: Fetcher.IEncrypted;
    function path(): string;
}
